"""
Django settings for helloworld project.

Generated by 'django-admin startproject' using Django 1.10.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
from setuptools_scm import get_version

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

#
# configuration parameters read from env variables
#
SERVICE_NAME = os.environ.get('SERVICE_NAME', 'helloworld')
TASK_SLOT = int(os.environ.get('TASK_SLOT', '1'))

LOG_TARGET = os.environ.get('LOG_TARGET', 'console')
LOG_LEVEL = os.environ.get('LOG_LEVEL', 'info')

SENTRY_DSN = os.environ.get('SENTRY_DSN', '')

PROMETHEUS_INTERVAL = int(os.environ.get('PROMETHEUS_INTERVAL', '10'))
PROMETHEUS_HOST = os.environ.get('PROMETHEUS_HOST', '')
PROMETHEUS_TAGS = os.environ.get('PROMETHEUS_TAGS', '')

DJANGO_STARTUP_TIME = int(os.environ.get('DJANGO_STARTUP_TIME', '10'))

VERSION = get_version()

# list of log handler names ('console', 'syslog', 'sentry')
root_handlers = [LOG_TARGET, ]
if SENTRY_DSN:
    root_handlers.append('sentry')

# define only log handlers that are actually used
log_handlers = {}

if 'console' in root_handlers:
    log_handlers['console'] = {
        'class': 'logging.StreamHandler',
        'formatter': 'console',
    }

if 'syslog' in root_handlers:
    log_handlers['syslog'] = {
        'class': 'logging.handlers.SysLogHandler',
        'address': '/dev/log',
        'formatter': 'syslog',
    }

if 'sentry' in root_handlers:
    log_handlers['sentry'] = {
        'level': 'WARNING',
        'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
    }

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'i1upql$pqi5&=9i3&ueet7=p3yc6&ezeag(w9o*^f6&cvvqd!m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'helloworldapp.apps.HelloworldappConfig',
]

MIDDLEWARE = [ ]

ROOT_URLCONF = 'helloworld.urls'

TEMPLATES = [ ]

WSGI_APPLICATION = 'helloworld.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [ ]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'

RAVEN_CONFIG = {
    'dsn': SENTRY_DSN,
    'release': VERSION,
    'tags': {
        'service': SERVICE_NAME,
        'slot': TASK_SLOT,
    },
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '%(asctime)s %(levelname)s %(name)s %(message)s',
        },
        'syslog': {
            'format': '{}: %(name)s %(message)s'.format(SERVICE_NAME),
        },
    },
    'handlers': log_handlers,
    'root': {
        'level': LOG_LEVEL.upper(),
        'handlers': root_handlers,
    },
    'loggers': {
        #'django': {
        #    'level': 'INFO',
        #},
    },
}
